var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/overview/introduction/",title:"Introduction",description:"WAHA - WhatsApp HTTP API that you can install on your own server and run in less than 5 minutes!",content:`WAHA - WhatsApp HTTP API that you can install on your own server and run in less than 5 minutes!
Get started #👉 Run WhatsApp HTTP API in less than 5 minutes! Go straight to the Quick Start →
Features #WAHA is distributed in two versions:
Core - the basic version that meet almost 80% people\u0026rsquo;s needs. 100% free and open source. Plus - the version with advanced messages, security, and reliability features. One-time donation, no license expiration, quick updates, read more about Plus Version → Here\u0026rsquo;s the available features:
Messages #Send messages Receive messages Message replies Send location Send buttons Receive location React to messages Send media (images/documents/files) Send voice messages Receive media (images/audio/video/documents) Receive messages - webhook retries Sessions #Multi Device Get the screenshot Session saving (don\u0026rsquo;t have to scan QR on every restart) Session saving on remote storage (database, redis) Single WhatsApp account running inside one container Multiple WhatsApp account running inside one container Security #API authentication Swagger panel authentication Updates #Bug fixes and updates come as soon as they are implemented. One month delay in bug fixes and updates. Groups #Join groups by invite Get invite for group Modify group info (subject, description) Modify group settings (send messages, edit info) Add group participants Kick group participants Promote/demote group participants Contacts #Mention users Mute/unmute chats Block/unblock contacts Get contact info Get profile pictures Set user status message `}),e.add({id:1,href:"/docs/overview/",title:"Overview",description:"Overview Doks.",content:""}),e.add({id:2,href:"/docs/overview/quick-start/",title:"Quick Start",description:"One page summary of how to start WhatsApp HTTP API.",content:`On this page you\u0026rsquo;re going to install WAHA, run it, authenticate the client using QR code and send the first text message to WhatsApp!
Requirements #Only thing that you must have - installed docker. Please follow the original instruction how to install docker -\u0026gt;.
When you are ready - come back and follows the below steps to send the first text message to WhatsApp via HTTP API!
Why Docker?Docker makes it easy to ship all-in-one solution with the runtime and dependencies. You don\u0026rsquo;t have to worry about language-specific libraries or chrome installation.
Also Docker makes installation and update processes so simple, just one command!
Send your first message #Let\u0026rsquo;s go over steps that allow you to send your first text message via WhatsApp HTTP API!
1. Download image #Assuming you have installed Docker, let\u0026rsquo;s download the image.
For Core version the command is
docker pull devlikeapro/whatsapp-http-api For Plus version, we use login to get the image before:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus docker logout Read more about how to get PASSWORD for Plus Version →
2. Run WhatsApp HTTP API #Run WhatsApp HTTP API:
docker run -it --rm -p 127.0.0.1:3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Open the link in your browser http://localhost:3000/ and you\u0026rsquo;ll see API documentation (Swagger).
👉 We don't recommend expose the API in the internet without authentication! 3. Start a new session #To start a new session you should have your mobile phone with installed WhatsApp application close to you.
Please go and read how what we\u0026rsquo;ll need to a bit later: How to log in - the instruction on WhatsApp site When your ready - find POST /api/session/start, click on Try it out, then Execute a bit below.
The example payload:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } By using the request with name values you can start multiple session (WhatsApp accounts) inside the single docker container in Plus version and only one account in Core version.
Read more about multiple sessions →
4. Get and scan QR #Find GET /api/screenshot and execute it, it shows you QR code.
Scan the QR with your cell phone\u0026rsquo;s WhatsApp app.
5. Get the screenshot #Execute GET /api/screenshot after a few seconds after scanning the QR - it\u0026rsquo;ll show you the screenshot of you Whatsapp instance. If you can get the actual screenshot - then you\u0026rsquo;re ready to start sending messages!
6. Send a text message #Let\u0026rsquo;s send a text message - find POST /api/sendText in swagger and change chatId this way: use a phone international phone number without + symbol and add @c.us at the end.
For phone number 12132132131 the chatId is 12132132131@c.us.
The example payload:
{ \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Also, you can use curl and send POST request like this:
# Phone without + export PHONE=12132132130 curl -d \u0026quot;{\\\u0026quot;chatId\\\u0026quot;: \\\u0026quot;\${PHONE}@c.us\\\u0026quot;, \\\u0026quot;text\\\u0026quot;: \\\u0026quot;Hello from WhatsApp HTTP API\\\u0026quot; }\u0026quot; -H \u0026quot;Content-Type: application/json\u0026quot; -X POST http://localhost:3000/api/sendText What is next? #Right now you\u0026rsquo;ve sent simple text message, but you can send more! Send messages → Read how to receive and response to messages Receive messages → Make sure your API is properly protected -\u0026gt; `}),e.add({id:3,href:"/docs/how-to/send-messages/",title:"Send messages",description:"Send messages",content:`On your swagger documentation http://localhost:3000/ or in the example swagger you can find:
List of all supported methods - we have not documented all of them on the page Requests JSON schemas Responses JSON schemas Try it button - no additional setup to play around with a method Fields #There are common fields that you can find in almost all requests:
session - a session name from which account you\u0026rsquo;re sending the message. We use default in the examples.
Core version supports only default session. Plus allows you to run multiple sessions inside one container to save your memory and CPU resources! Read more about multiple sessions → chatId - it\u0026rsquo;s a phone number or Group identifier where you\u0026rsquo;re sending the message.
Phone numbers accounts use international phone number without + at the start and add @c.us at the end. For phone number 12132132131 the chatId is 12132132131@c.us. Groups use random number with @g.us at the end. Send text #To send text message - use POST /api/sendText with example payload.
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot; } Reply on message #To reply on a message - use POST /api/reply with example payload.
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;reply_to\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Reply text\u0026quot; } Reply files #WAHA does not support reply with files (images, voice, etc). If you\u0026rsquo;re interested in it - please create an issue in GitHub.
Add a reaction #Use PUT /api/reaction method to set reaction to a message.
👉 Reaction API uses PUT, not POST request! Please make sure you send right request. { \u0026quot;messageId\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;reaction\u0026quot;: \u0026quot;👍\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } To remove reaction from a message - send empty string in the reaction request.
{ \u0026quot;messageId\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;reaction\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send image #Use POST /api/sendImage to send images.
You can send images in two ways:
Provide a URL for the image. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/dev.likeapro.jpg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Base64 #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;/9j/4AAQSkZJRgABAQAAAQABAAD/4gIoSUNDX1BST0ZJTEUAAQEAAAIYAAAAAAQwAABtbnRyUkdCIFhZWiAAAAAAAAAAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAAHRyWFlaAAABZAAAABRnWFlaAAABeAAAABRiWFlaAAABjAAAABRyVFJDAAABoAAAAChnVFJDAAABoAAAAChiVFJDAAABoAAAACh3dHB0AAAByAAAABRjcHJ0AAAB3AAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAFgAAAAcAHMAUgBHAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA+EAAC2z3BhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABYWVogAAAAAAAA9tYAAQAAAADTLW1sdWMAAAAAAAAAAQAAAAxlblVTAAAAIAAAABwARwBvAG8AZwBsAGUAIABJAG4AYwAuACAAMgAwADEANv/bAEMABgQFBgUEBgYFBgcHBggKEAoKCQkKFA4PDBAXFBgYFxQWFhodJR8aGyMcFhYgLCAjJicpKikZHy0wLSgwJSgpKP/bAEMBBwcHCggKEwoKEygaFhooKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKP/AABEIADAAyAMBIgACEQEDEQH/xAAbAAABBQEBAAAAAAAAAAAAAAAAAwQFBgcCAf/EADwQAAEDBAECAwQGBwkBAAAAAAECAwQABQYRIRIxB0FRExQiYRUlcXOBkQgnMjNCdbEWJENSdJKhssHh/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/AMg8UfEO755kUqVMlPJtocUIkILIbab3x8PYqI5JPO/lqqVuk90boFN0bpPdTrOLXR7DJGUobZ+iGJYhLWXR1h0gEDp76+Ic0ENujdJ7o3QKbo3Se6N0Etjh+v7f98mtT3WUY4fr+3/fJrU90Cm6N1INWOc7jj18Qlv6PZfEdaisdXWda+H05HNcSLNcY9njXV6KtFukrLbL5I6VqG9gc7/hPl5UDLdG6kLtZJ1qgWyZMS2li4tF6OUrCiUjXceXcVF7oFN0bpPdG6BTdG6T3RugU3Ruk90boFN0bpPdG6BTde7pLdG6C04Rl1wxe7sPx33DDKwJEYqJQ4jz48iB2NFVbdFBi26N0nuvCdgj1GqDX7PguKY/h1ryLxMuN0bVd0lyBa7WhPtlND/EWpXAB2DrjgjueBZr+jGW/wBGq7qw2Vc3rYu/NKUm5NpQ60vpRtJKeFDWjv5/Ko7x8t0y+454e5HZ4z8q0LsbUQrYbK0tOo7pVrseSPtSfSvHLLc7N+ipc0XaBIhOSb62+yiQgoUtspQArR50SD39KCFRh2IYjYbVO8SJ13Xc7qwJUe02kNpW0wf2VurXwCeeB6efOvL9hOKi1WLLLBdLk9hky4JgT0yEoEuAvudkDpV8PPb07740zxhyq8xoOO5HjmO2G8Y7PtrPTLkWpMpbLg3ttau6QPIHz6h5VlmXZhmN88PnY8/HbfbcZXLbUp2JbPdULe0ekA70o6Sd6B4FBB+LOHnBM3m2ZDrj8NKUPxX1626yobB44JB6gdelPPEPDYWH45ihekyV5DdYnv0uMrp9nHaV+7AGt9R89n+E1q2LY+14xYdgdwlLQZWOy/o28KWoAqhoHtEqO/klKftWr0rFvFfKzmef3e8pJ92dd9nFT5JYR8KBry2Bv7SaCHxw/X9v++TWqbrJ8cP1/b/vk1qm6DRref1GXb+cN/0RURdLMY3h5Y7x9Iznfe5LrXujjm2Gukq+JCfInXP2mpS3H9RV2/nDf/VFGQH9SuKf6+R/VygcZ5HfmYx4dxojS3pD0AobbQNqUo9GgBUBltkteNssW1ya7LyXQXLaYKSxFB7IJ1tS+3AP/m9GXl9uxPHsCenW1x/3i3Kacmtr05EaISFFseatlJ9dJNZxlWNKxK7Q5zbxuNllOJlRZwPX7wnqCiFHzXrv69/XQSM+z4riYjxcwk3WTeXWkvOQ7aEARUq5AWpXdWvIf/TH5bYIMK12y949MdmWW5BYaL6Ql1pxPdtYHG+D+R+03vxUv97t99FwtVmsVwsk9lt6NOdt4fUv4RsKWPP035EVTrjdciv8Ozw8gt8K12F2ehLbkaH7uOtXCiN9/hUTvWt0HKJXhnHbQ1IlZNKf6R1usNIShKtc6BAJG6a5xjjOPy4DlvmGba7jHTKiPKT0qKD5KHqNj86t2a3e/YrlDthw6ww4ENgISw6IHt3ZO0glXUQd8kj145pDxqXPVGw5V4HTcjbyZI6QnTm0dXA4HPkKDjKccwbD7yIt8u93lKW0lxMSGykuoBH7S16CdHyA54qCzjHINrttsvePTXJtiuSFFlbqdONrT3Qrt6H8iKmvHKBMXnftm4clTbkRhKVoZUQogHYBA5pLNWl2Lwoxyx3BJaub7709TCuFtNnqA6h5b6h/z6UC+RYdiuNuwXb5kj8aPJioeTGba9rJWo9yABpKO2iRyd1GWrG7FKYvF+kXSU1iMBxLbb/sv7xJWQNISkjg7Ou3mPmQ58bgn6fsqtDq+h443+KqVtDSr34KXCBbkKem225pmPMoG1ltSeFADv3P+00DeLYsYyqFP/sXJurN1hMmQYNySnb7Y7lCk+fbj5j13VDCtjYrRPBWM7CyCZf5ra2bXbYTyn33ElKdkD4dnueCdfKs4UvqUVa6eo716b8qDvdFJ7ooMW3Rurt4seHF5wDI5caZEeVay4oxJoQS263v4fi7BQHBB538tGqJ1UFzw/xKy7DobkTHL5IhxHFFRZ6UOICj3ISsEJP2U1vWeZPe7fKg3e+TZsSU+JLzby+oKcAAB7caAGgNDjtVW6qOqgtuI+IOVYe2tvHL5LhMrV1KZSQtsn16FAjfz1XmXeIGU5g2hvJL5LnMoV1pZUQlsK9ehICd8nnXnVT6qOqgnrFlV7sEK5Q7Nc5EONcW/ZS22lAB1OiNH8FKHHrUNukuqjqoJbHD9fQPvk1qnVWUY2fr6B98mtS3QP0XW4otq7Yia4m2OOB5cUAdKnBrSvXfA/Kh263F63sW56a4u3R1FbMYgdLajvZHnzs/nTHdG6B9LulwnR4sedNckR4iPZxm1gaZRx8I19g7+ldM3i6M2hdobnu/RCle09zUApCVb3tOxtPPPHz9aj90boJyw5bkmOslixXuRFjEkiOoJcbST30lQOvwpvesgvV/WF3+6yZ+t9KHCAhG+/SkaAqL3RugszOfZmxbU29nJJaYqU9CT0pLqU+gc11fjvdREy7XK4oit3Oe/MRFT7Nj2xBLaOON9z2HJphujdBq3iZ4gXmNl7pxHJvq5UZkaYKHmgvR6tbBAPbeqzKbMl3CW7Luct6bMe/ePPK6lK9B8h8hTRAShOkAJHoK63QP7jdbjdXW3btNcmOtNhptTgAKUDska8hs1zbLncLRORNs05+DMQOkOtHun/KodiPkaZbo3QTt/wAvyXI2UsX68vSoySFewSlLbaiOxUEgb/GobqpPdG6BTqoqyYFh9xy28x48aO6IQWDIklJCG0b5581EcACig//Z\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Send voice #Use POST /api/sendVoice to send voice messages.
You can send voice messages in two ways:
Provide a URL for the voice. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/ogg; codecs=opus\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;voice-message.mp3\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/dev.likeapro.mp3\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Base64 #{ \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/ogg; codecs=opus\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;voice-message.mp3\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send file #Use POST /api/sendFile to send a file as a document.
You can send files in two ways:
Provide a URL for the file. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/main/docs/dev.likeapro.jpg\u0026quot; }, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Base64 #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;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\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } `}),e.add({id:4,href:"/docs/how-to/receive-messages/",title:"Receive messages",description:"Receive messages",content:`The project uses Webhooks to send the messages or events from WhatsApp to your application.
Webhooks #You can configure where you want to receive events in environment variables:
WHATSAPP_HOOK_URL=https://httpbin.org/post - to set up a URL for the webhook WHATSAPP_HOOK_EVENTS=message,message.any,state.change,group.join,group.leave - specify events. DO NOT specify all of them, it\u0026rsquo;s too heavy payload, choose the right for you. WHATSAPP_HOOK_EVENTS=* - subscribe to all events. It\u0026rsquo;s not recommended for production, but it\u0026rsquo;s fine for development. On the URL that you set via WHATSAPP_HOOK_URL you receive JSON-data with following format:
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;payload\u0026quot;: {} } Where event value helps you identify the incoming event with payload for that events.
Below the list of all events that WhatsApp HTTP API sends to your.
👉 If you want to look at a webhook body - use the url \`https://httpbin.org/post\` Run the bellow command and see look at the logs - it prints body request for all events that happen in your WhatsApp!
docker run -it -e WHATSAPP_HOOK_EVENTS=* -e WHATSAPP_HOOK_URL=https://httpbin.org/post devlikeapro/whatsapp-http-api Examples #Here\u0026rsquo;s few examples of how to handle webhook in different languages:
Python guide Do you use another language?
Please create a short guide how to handle webhook and send message after you finish your setup! You can create a pull request with your favorite language in the GitHub, in examples folder.
Just put the code and README.md file in the folder - we\u0026rsquo;ll do the rest!
Events #message #Incoming message (text/audio/files)
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: true, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;hasMedia\u0026quot;: false, \u0026quot;ack\u0026quot;: 1, \u0026quot;vCards\u0026quot;: [], \u0026quot;_data\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;fromMe\u0026quot;: true, \u0026quot;remote\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;_serialized\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot; }, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;chat\u0026quot;, \u0026quot;t\u0026quot;: 1667561485, \u0026quot;notifyName\u0026quot;: \u0026quot;MyName\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;self\u0026quot;: \u0026quot;in\u0026quot;, \u0026quot;ack\u0026quot;: 1, \u0026quot;isNewMsg\u0026quot;: true, \u0026quot;star\u0026quot;: false, \u0026quot;kicNotified\u0026quot;: false, \u0026quot;recvFresh\u0026quot;: true, \u0026quot;isFromTemplate\u0026quot;: false, \u0026quot;pollInvalidated\u0026quot;: false, \u0026quot;latestEditMsgKey\u0026quot;: null, \u0026quot;latestEditSenderTimestampMs\u0026quot;: null, \u0026quot;broadcast\u0026quot;: false, \u0026quot;mentionedJidList\u0026quot;: [], \u0026quot;isVcardOverMmsDocument\u0026quot;: false, \u0026quot;isForwarded\u0026quot;: false, \u0026quot;hasReaction\u0026quot;: false, \u0026quot;ephemeralOutOfSync\u0026quot;: false, \u0026quot;productHeaderImageRejected\u0026quot;: false, \u0026quot;lastPlaybackProgress\u0026quot;: 0, \u0026quot;isDynamicReplyButtonsMsg\u0026quot;: false, \u0026quot;isMdHistoryMsg\u0026quot;: false, \u0026quot;stickerSentTs\u0026quot;: 0, \u0026quot;isAvatar\u0026quot;: false, \u0026quot;requiresDirectConnection\u0026quot;: false, \u0026quot;pttForwardedFeaturesEnabled\u0026quot;: true, \u0026quot;isEphemeral\u0026quot;: false, \u0026quot;isStatusV3\u0026quot;: false, \u0026quot;links\u0026quot;: [] } } } message.any #Fired on all message creations, including your own. The payload is the same as for message event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;payload\u0026quot;: {} } message.ack #{ \u0026quot;event\u0026quot;: \u0026quot;message.ack\u0026quot;, \u0026quot;payload\u0026quot;: {} } state.change #{ \u0026quot;event\u0026quot;: \u0026quot;state.change\u0026quot;, \u0026quot;payload\u0026quot;: {} } group.join #{ \u0026quot;event\u0026quot;: \u0026quot;group.join\u0026quot;, \u0026quot;payload\u0026quot;: {} } group.leave #{ \u0026quot;event\u0026quot;: \u0026quot;group.left\u0026quot;, \u0026quot;payload\u0026quot;: {} } Files #When people send you files - images, voice messages, and documents - WAHA saves it in the file storage. In your application you must download it and use it as you want to. You can find the URL in mediaUrl field
For example, you can get the webhook like this with mediaUrl value (we\u0026rsquo;ve skipped other fields):
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;mediaUrl\u0026quot;: \u0026quot;http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.jpg\u0026quot; } } Then you can use the link to download the file http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.jpg.
To configure the url you can use environment variables WHATSAPP_API_HOSTNAME and WHATSAPP_API_PORT.
Read more about file storage configuration and variables -\u0026gt;.
Webhook retries #WAHA retries to reach your webhook URL 15 times and with 2 seconds delay between attempts.
Get messages #You can read messages from the history by using GET /api/messages endpoint.
curl -X 'GET' \\ 'http://localhost:3000/api/messages?chatId=11111111111%40c.us\u0026amp;limit=1000\u0026amp;session=default' \\ -H 'accept: application/json' `}),e.add({id:5,href:"/docs/how-to/contacts/",title:"Contacts",description:"Contacts",content:`Methods for contacts.
👉 WhatsApp Web does not support adding contacts, so the API doesn't support it too. Get all contacts #Get your contacts - GET /api/contacts/all
[ { \u0026quot;id\u0026quot;: \u0026quot;11231231231@c.us\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Contact Name\u0026quot;, \u0026quot;pushname\u0026quot;: \u0026quot;Pushname\u0026quot;, \u0026quot;shortName\u0026quot;: \u0026quot;Shortname\u0026quot;, \u0026quot;isMe\u0026quot;: true, \u0026quot;isGroup\u0026quot;: false, \u0026quot;isWAContact\u0026quot;: true, \u0026quot;isMyContact\u0026quot;: true, \u0026quot;isBlocked\u0026quot;: false } ] Get contact #Get contact
GET /api/contacts?contactId=11231231231\u0026amp;session=default GET /api/contacts?contactId=11231231231@c.us\u0026amp;session=default { \u0026quot;id\u0026quot;: \u0026quot;11231231231@c.us\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Contact Name\u0026quot;, \u0026quot;pushname\u0026quot;: \u0026quot;Pushname\u0026quot;, \u0026quot;shortName\u0026quot;: \u0026quot;Shortname\u0026quot;, \u0026quot;isMe\u0026quot;: true, \u0026quot;isGroup\u0026quot;: false, \u0026quot;isWAContact\u0026quot;: true, \u0026quot;isMyContact\u0026quot;: true, \u0026quot;isBlocked\u0026quot;: false } Check phone number exists #If you want to check if phone number is registered in WhatsApp (even if the number is not in your contact list) - use this endpoint for that.
GET /api/contacts/check-exists?phone=11231231231\u0026amp;session=default { \u0026quot;numberExists\u0026quot;: true } Get \u0026ldquo;about\u0026rdquo; contact #GET /api/contacts/about?contactId=11231231231\u0026amp;session=default { \u0026quot;about\u0026quot;: \u0026quot;Hi, I use WhatsApp!\u0026quot; } Get contact profile picture #GET /api/contacts/profile-picture?contactId=11231231231\u0026amp;session=default { \u0026quot;profilePictureURL\u0026quot;: \u0026quot;https://example.com/profile.jpg\u0026quot; } Block (unblock) contact #To block contact - POST /api/contacts/block To unblock contact - POST /api/contacts/unblock Request:
{ \u0026quot;contactId\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } `}),e.add({id:6,href:"/docs/how-to/",title:"How-to guides",description:"How-to guides",content:""}),e.add({id:7,href:"/docs/how-to/sessions/",title:"Sessions",description:"Sessions",content:`Saving session #Plus version allows you to save \u0026ldquo;session\u0026rdquo; state and avoid scanning QR code everytime when you start a container.
File storage #If you want to save your session and do not scan QR code everytime when you launch WAHA - connect a local file storage to the container. WAHA stores authentication information in the directory and reuses it after restart.
Attach volume part to the command:
-v \`pwd\`/.sessions:/app/.sessions The full command would be:
docker run --rm -d -v \`pwd\`/.sessions:/app/.sessions -p 127.0.0.1:3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api Remote storage #If you\u0026rsquo;re interested in using some \u0026ldquo;remote\u0026rdquo; storage (like Redis or other Databases) to save sessions - please create an issue on GitHub.
For instances, it may be useful if you run WAHA in a cluster of servers and do not have shared file storage
Multiple sessions #If you want to save server\u0026rsquo;s CPU and Memory - run multiple sessions inside one docker container!
Start #In order to start a new session - call POST /api/sessions/start
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } List #To get session list - call GET /api/sessions.
The response:
[ { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;STARTING\u0026quot; } ] Stop #In order to stop a new session - call POST /api/sessions/stop
👉 The stop request does not log out the account. Manually remove the session storage. { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } `}),e.add({id:8,href:"/docs/help/changelog/",title:"Changelog",description:"WAHA's changelog",content:`2021.1 #Added contacts API Get all contacts Get a contact Get contact \u0026ldquo;about\u0026rdquo; (status) Get contact profile picture Check number exists (is registered in WhatsApp) - works even if the number is not in the contact list Block and unblock contact 2022.12 #Added GET /messages/ endpoint to get chat messages #31 Security #Added WHATSAPP_SWAGGER_USERNAME and WHATSAPP_SWAGGER_PASSWORD to hide and protect swagger panel. 2022.11 #Please test changes in test environment before update production!!
Engine #WAHA has changed its underlying engine from Venom to Whatsapp Web.JS. It might change the response and webhook\u0026rsquo;s payloads. Optimize CPU and memory consumption. Requests #For all /api/session/ requests use name field instead of sessionName. For all \u0026ldquo;chatting\u0026rdquo; requests use session field instead of sessionName. Sessions #Now you don\u0026rsquo;t have to scan QR code each time you run WAHA, WAHA saves it for you! Available only in Plus version.
Authentication #Now you can authenticate all requests for WAHA - use WHATSAPP_API_KEY=secret environment variable to set \u0026ldquo;secret key\u0026rdquo;.
If WHATSAPP_API_KEY is set - requests must have X-Api-Key header with secret value, where secret - any random secret key.
Webhooks #Configuration #Instead of setting each webhook via environment variables - we use two environments variables:
WHATSAPP_HOOK_URL - to set a URL WHATSAPP_HOOK_EVENTS - to set events that are sent to the URL Previous Current WHATSAPP_HOOK_ONMESSAGE=https://httpbin.org/post WHATSAPP_HOOK_ONANYMESSAGE=https://httpbin.org/post WHATSAPP_HOOK_URL=https://httpbin.org/post WHATSAPP_HOOK_EVENTS=message,message.any Payload #The data for webhooks are wrapped inside a new WAWebhook object with event and payload fields to help you identify which handler you should call based on event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;payload\u0026quot;: { } } `}),e.add({id:9,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed WAHA to keep your bot stable, usable, and secure.",content:`💡 Please test all new versions in the development environment before updating production! Core #For Core version the command is
docker pull devlikeapro/whatsapp-http-api Plus #For Plus version, we use login to get the image before:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus docker logout Read more about how to get PASSWORD for Plus Version →
`}),e.add({id:10,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`How much CPU and Memory does WhatsApp HTTP API consume? #The benchmark has been made on Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz. It may differ from case to case, it depends on usage pattern - how many messages you get, how many send, etc.
Accounts (sessions) in the container CPU Memory 1 30% 400MB 10 270% 1.5GB The nature of WhatsApp HTTP API and its underlying engines - is to run real WhatsApp Web version in Chrome and communicate with it to prevent blocking from WhatsApp. It\u0026rsquo;s the reason why it\u0026rsquo;s so demanding on resources.
`}),e.add({id:11,href:"/docs/examples/python/",title:"Python",description:"WhatsApp HTTP API Python example.",content:`To show how to receive messages we\u0026rsquo;ve created a simple \u0026ldquo;echo\u0026rdquo; server with two functions:
When we receive a text message - just send the text back When we receive a message with a file (an image, a voice message) - download it and send the path back In order to send you messages we use Webhooks and configure them via environments variables. So what you need to create \u0026ldquo;echo\u0026rdquo; server is HTTP server that will receive JSON POST request and then call back WhatsApp HTTP API via POST /api/sendText endpoint with JSON body.
Python echo server #We use Python. Feel free to create your favorite language example and contribute to the project!
Run \u0026ldquo;echo\u0026rdquo; server in one terminal and leave it working:
# if you haven't already git clone https://github.com/devlikeapro/whatsapp-http-api.git cd whatsapp-http-api python -mpip install -r examples/requirements.txt export FLASK_APP=examples/echo.py flask run Visit http://localhost:5000 and check that we are good to go further.
Let\u0026rsquo;s start WhatsApp HTTP API and configure the \u0026ldquo;on message\u0026rdquo; webhook and point it on our \u0026ldquo;http://localhost:5000/message\u0026rdquo; endpoint:
docker run -it --network=host -e WHATSAPP_HOOK_URL=http://localhost:5000/message -e WHATSAPP_HOOK_EVENTS=* devlikeapro/whatsapp-http-api Now go ahead, open the second whatsapp and send to our WhatsApp HTTP API a text message! It must reply the same text.
If you try to send an image the \u0026ldquo;echo server\u0026rdquo; will send a path to the downloaded file.
`}),e.add({id:12,href:"/docs/how-to/security/",title:"Security",description:"Security",content:`💡 Do not expose WhatsApp HTTP API on public networks! We do not recommend exposing the API on any public networks!
Either protect the API with Api Key or deny access by using firewalls.
Swagger Security #If you want to hide the project Swagger panel under the password - run the following command to hide under admin/admin login and password.
docker run -it -e WHATSAPP_SWAGGER_USERNAME=admin -eWHATSAPP_SWAGGER_PASSWORD=admin devlikeapro/whatsapp-http-api-plus Open http://localhost:3000/ and enter admin / admin in the inputs:
👉 Protecting Swagger under the password does not protect your API from other request! Use both techniques to protect your API and Swagger! API security #You can protect the API by requiring Api Key in a request\u0026rsquo;s headers.
👉 Api Key does not hide your Swagger documentation. Please have a look at the previous section to find how to hide Swagger under the password. Set Api Key #Set WHATSAPP_API_KEY=yoursecretkey environment variable for that:
docker run -it -e WHATSAPP_API_KEY=yoursecretkey devlikeapro/whatsapp-http-api-plus Use Api-Key in Swagger #After you set api key - to authorize on swagger use Authorize button at the top: Add X-Api-Key header #To authorize requests - set X-Api-Key header to yoursecretkey for all requests that go to WAHA.
Python #Example for Python requests library:
import requests headers = { 'Content-type': 'application/json', 'X-Api-Key': 'yoursecretkey', } requests.get(\u0026quot;http://localhost:3000/api/sessions\u0026quot;, headers=headers) `}),e.add({id:13,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:14,href:"/docs/how-to/config/",title:"Configuration",description:"Configuration",content:`You can configure WhatsApp HTTP API behaviour via environment variables, by adding -e WHATSAPP_VARNAME=value at the begging of the command line or by using other options
docker run -it -e WHATSAPP_HOOK_EVENTS=* -e WHATSAPP_HOOK_URL=https://httpbin.org/post devlikeapro/whatsapp-http-api Environment variables #DEBUG=1 - show debug and verbose logs, set in any value WHATSAPP_API_PORT=3000 - listen port for HTTP server (default: 3000) WHATSAPP_API_HOSTNAME=localhost - Hostname for HTTP server (default: localhost) WHATSAPP_API_KEY=mysecret - protect the api with a secret code. If you set it - add X-Api-Key: mysecret to all requests. WHATSAPP_SWAGGER_USERNAME=admin + WHATSAPP_SWAGGER_PASSWORD=admin - protect the Swagger panel with admin / admin credentials. It doesn\u0026rsquo;t affect api access! WHATSAPP_START_SESSION=default - start session with the name right after launching the app File storage #WHATSAPP_FILES_MIMETYPES - download only these mimetypes from messages (download all files be default). Mimetypes must be separated by a comma, without spaces: audio,image/png,image/gif. In order to choose type use prefix ( like audio,image). WHATSAPP_FILES_LIFETIME- to keep free space files will be removed after this time (default: 180, in seconds) WHATSAPP_FILES_FOLDER - folder where will be stored files from chats (images, voice messages) ( default: /tmp/whatsapp-files) Engines #Under the hood WAHA allows you to use two different engines. You can control what you want to run by settings WHATSAPP_DEFAULT_ENGINE environment variables.
If you have any problems with one engine - try another!
👉 API responses and webhook payloads may differ significantly! We do our best to keep requests body stable between engines. WhatsApp WebJS #WAHA uses WhatsApp WebJS engine by default
https://github.com/pedroslopez/whatsapp-web.js WHATSAPP_DEFAULT_ENGINE=WEBJS Venom #https://github.com/orkestral/venom WHATSAPP_DEFAULT_ENGINE=VENOM `}),e.add({id:15,href:"/docs/examples/",title:"Examples",description:"Examples for different languages.",content:""}),e.add({id:16,href:"/docs/how-to/plus-version/",title:"Plus version",description:"Plus version",content:`Overview #WAHA is distributed in two versions:
Core the basic version that meet almost 80% people’s needs. 100% free and open source. Plus the version with advanced messages, security, and reliability features. If you enjoy Core version and would like to support the project - you can subscribe on Core level. It\u0026rsquo;s not expensive, but it supports the project a lot!
Boosty -\u0026gt; Patreon -\u0026gt; Features #The Plus additional features are:
Send images\\files\\voices → Receive images\\files\\voices → Webhook retries → Security → Saving sessions → Support multiple sessions → Instant updates - no one month delay in getting bugfixes or new features Priority in support - on both bugs and features Differences #What is the difference between WAHA Plus and other SaaS solutions for WhatsApp HTTP API?
WAHA Plus Others Sessions ✔️ No limits on accounts or servers! ➖ One account for \$50/month. Infrastructure ✔️ On-Premise - your server, your infrastructure! ➖ Insecure cloud solution. Security ✔️ No data leaks! ➖ You have to give access to customers\u0026rsquo; data - phone number, name, your messages. License Term ✔️ No license checks! ➖ One month Message price ✔️ All messages are Free! ➖ Some solutions have a price for messages - \$1/100 messages. Expenses ✔️ \$19 donation! ➖ Monthly payment starts from \$50 Donations #WAHA Plus version is available through donations (subscriptions).
It doesn\u0026rsquo;t require monthly subscriptions, once installed on your server - it always works! (until WhatsApp made backward-incompatible changes, and you have to update the image)
💡 No licence checks or expiration on already installed instances! We do not sell WAHA, it\u0026rsquo;s not a purchase. It\u0026rsquo;s a donation.
We treat our projects like art. You donate to the project and get a bit more from it as a thank-you. 😊
Treat WAHA Plus it as an additional episode, behind-the-scenes videos, our nude photos 😊
💡 WAHA does not have license checks and expiration - because art can not expire! Enjoy it till it works! We donate most of the donations down to the stream to the underlying libraries and tools - JS-community, Node, other libraries authors, personal contributors. By donating to the WAHA you donate to the Open Source world!
Get Plus #For \$19 one-time donation you get:
Secret password for Docker Hub to download Plus image: devlikeapro/whatsapp-http-api-plus. All updates for one month for the Plus image. NO LICENSE CHECKS on installed instances! NO LICENSE EXPIRATION on installed instances! We repeated it twice to make sure that you\u0026rsquo;ve got it 😊 👉 We don't mind if you stay subscribed with us after one month :) Boosty #We use Boosty to get donations (Patreon analogue) - https://boosty.to/wa-http-api.
Go ahead and get your monthly password to get no license expiration WhatsApp HTTP API!
💡 If you stay subscribed - the donation amount will never change for you and always be \$19 to get monthly updates! Patreon #You can support the project and get WAHA Plus version on Patreon: https://patreon.com/wa_http_api
💡 Please look at Boosty - we prefer it because of lower fees, so we can donate more to the projects! Install Plus #After you get the password, use it to login and download docker image:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus docker logout Then in all commands use Plus image devlikeapro/whatsapp-http-api-plus instead of Core devlikeapro/whatsapp-http-api.
`}),e.add({id:17,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()