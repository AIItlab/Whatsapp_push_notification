var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/overview/introduction/",title:"Introduction",description:"WAHA - WhatsApp HTTP API that you can install on your own server and run in less than 5 minutes!",content:`WAHA - WhatsApp HTTP API that you can install on your own server and run in less than 5 minutes!
Get started #👉 Run WhatsApp HTTP API in less than 5 minutes! We will guide you through the necessary steps to successfully send your first text message using WhatsApp HTTP API in Quick Start →.
Features #WAHA is distributed in two versions:
Core - the basic version that meet almost 80% people\u0026rsquo;s needs. 100% free and open source -\u0026gt;. Plus - the version with advanced messages, security, and reliability features. Donations, no license expiration, quick updates, read more about Plus Version → Here\u0026rsquo;s the available features:
Messages #Send messages Receive messages Message replies Send location Send buttons Receive location React to messages Send media (images/documents/files) Send voice messages Receive media (images/audio/video/documents) Receive messages - webhook retries Groups #Create a group Get invite for group Modify group info (subject, description) Add group participants Kick group participants Promote/demote group participants Contacts #Mute/unmute chats Block/unblock contacts Get contact info Get profile pictures Get presence (online\\offline\\typing) status Sessions #Multi Device Get the screenshot Single WhatsApp account running inside one container Multiple WhatsApp account running inside one container Session saving (don\u0026rsquo;t have to scan QR on every restart) Session saving on remote storage (database, redis) Security #API authentication Swagger panel authentication Updates #Bug fixes and updates come as soon as they are implemented. `}),e.add({id:1,href:"/docs/overview/",title:"Overview",description:"Overview Doks.",content:""}),e.add({id:2,href:"/docs/overview/quick-start/",title:"Quick Start",description:"One page summary of how to start WhatsApp HTTP API.",content:`On this page you\u0026rsquo;re going to install WAHA, run it, authenticate the client using QR code and send the first text message to WhatsApp!
Requirements #Only thing that you must have - installed docker. Please follow the original instruction how to install docker -\u0026gt;.
When you are ready - come back and follows the below steps to send the first text message to WhatsApp via HTTP API!
Why Docker?Docker makes it easy to ship all-in-one solution with the runtime and dependencies. You don\u0026rsquo;t have to worry about language-specific libraries or chrome installation.
Also Docker makes installation and update processes so simple, just one command!
Send your first message #We will guide you through the necessary steps to successfully send your first text message using WhatsApp HTTP API.
If you find it easier to follow a video tutorial, we\u0026rsquo;ve got you covered! A 3-minute video tutorial is available to help you navigate WhatsApp HTTP API smoothly.
1. Download image #Assuming you have installed Docker, let\u0026rsquo;s download the image.
For Core version the command is
docker pull devlikeapro/whatsapp-http-api For Plus version, we use login to get the image before:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus docker logout Read more about how to get PASSWORD for Plus Version →
1.1 Download image on ARM #If you\u0026rsquo;re using ARM (like Apple Silicon, Apple M1, etc) - use following commands to download the image
For Core version the command is
# Download the image docker pull devlikeapro/whatsapp-http-api:arm # Rename it, so you can use devlikeapro/whatsapp-http-api image in other place docker tag devlikeapro/whatsapp-http-api:arm devlikeapro/whatsapp-http-api For Plus version the command is:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus:arm docker logout # Rename it, so you can use devlikeapro/whatsapp-http-api image in other place docker tag devlikeapro/whatsapp-http-api-plus:arm devlikeapro/whatsapp-http-api 2. Run WhatsApp HTTP API #Run WhatsApp HTTP API:
docker run -it --rm -p 3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Open the link in your browser http://localhost:3000/ and you\u0026rsquo;ll see API documentation (Swagger).
👉 We don't recommend expose the API in the internet without authentication! 3. Start a new session #To start a new session you should have your mobile phone with installed WhatsApp application close to you.
Please go and read how what we\u0026rsquo;ll need to a bit later: How to log in - the instruction on WhatsApp site When your ready - find POST /api/session/start, click on Try it out, then Execute a bit below.
The example payload:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } By using the request with name values you can start multiple session (WhatsApp accounts) inside the single docker container in Plus version and only one account in Core version.
Read more about multiple sessions →
4. Get and scan QR #Find GET /api/screenshot and execute it, it shows you QR code.
Scan the QR with your cell phone\u0026rsquo;s WhatsApp app.
5. Get the screenshot #Execute GET /api/screenshot after a few seconds after scanning the QR - it\u0026rsquo;ll show you the screenshot of you Whatsapp instance. If you can get the actual screenshot - then you\u0026rsquo;re ready to start sending messages!
6. Send a text message #Let\u0026rsquo;s send a text message - find POST /api/sendText in swagger and change chatId this way: use a phone international phone number without + symbol and add @c.us at the end.
For phone number 12132132131 the chatId is 12132132131@c.us.
The example payload:
{ \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Also, you can use curl and send POST request like this:
# Phone without + export PHONE=12132132130 curl -d \u0026quot;{\\\u0026quot;chatId\\\u0026quot;: \\\u0026quot;\${PHONE}@c.us\\\u0026quot;, \\\u0026quot;text\\\u0026quot;: \\\u0026quot;Hello from WhatsApp HTTP API\\\u0026quot; }\u0026quot; -H \u0026quot;Content-Type: application/json\u0026quot; -X POST http://localhost:3000/api/sendText What is next? #Right now you\u0026rsquo;ve sent simple text message, but you can send more! Send messages → Read how to receive and response to messages Receive messages → Make sure your API is properly protected -\u0026gt; `}),e.add({id:3,href:"/docs/how-to/send-messages/",title:"Send messages",description:"Send messages",content:`We consider that you\u0026rsquo;ve run docker container and authenticated the session with QR code.
If you haven\u0026rsquo;t yet - please follow the steps from Quick Start →.
Fields #There are common fields that you can find in almost all requests:
session - a session name from which account you\u0026rsquo;re sending the message. We use default in the examples.
Core version supports only default session. Plus allows you to run multiple sessions inside one container to save your memory and CPU resources! Read more about multiple sessions → chatId - it\u0026rsquo;s a phone number or Group identifier where you\u0026rsquo;re sending the message.
Phone numbers accounts use international phone number without + at the start and add @c.us at the end. For phone number 12132132131 the chatId is 12132132131@c.us. Groups use random number with @g.us at the end. Send text #To send text message - use POST /api/sendText with example payload.
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot; } Mention contact #If you send a message in a group and want to mention a participant in the message - use mentions field for that in POST /api/sendText request.
Please note that you MUST mention a number in the text as well in the format @2132132130 and also mention it in mentions in format 2132132130@c.us
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there! @2132132130\u0026quot;, \u0026quot;mentions\u0026quot;: [ \u0026quot;2132132130@c.us\u0026quot; ] } Reply on message #To reply on a message - use POST /api/reply with example payload.
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;reply_to\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Reply text\u0026quot; } Reply files #WAHA does not support reply with files (images, voice, etc). If you\u0026rsquo;re interested in it - please create an issue in GitHub.
Add a reaction #Use PUT /api/reaction method to set reaction to a message.
👉 Reaction API uses PUT, not POST request! Please make sure you send right request. { \u0026quot;messageId\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;reaction\u0026quot;: \u0026quot;👍\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } To remove reaction from a message - send empty string in the reaction request.
{ \u0026quot;messageId\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;reaction\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send image #Use POST /api/sendImage to send images.
You can send images in two ways:
Provide a URL for the image. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/dev.likeapro.jpg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Base64 #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;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\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Send voice #Use POST /api/sendVoice to send voice messages.
You can send voice messages in two ways:
Provide a URL for the voice. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/ogg; codecs=opus\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;voice-message.mp3\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/dev.likeapro.mp3\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Base64 #{ \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/ogg; codecs=opus\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;voice-message.mp3\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send file #Use POST /api/sendFile to send a file as a document.
You can send files in two ways:
Provide a URL for the file. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/main/docs/dev.likeapro.jpg\u0026quot; }, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Base64 #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;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\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } `}),e.add({id:4,href:"/docs/overview/how-to-avoid-blocking/",title:"How to Avoid Blocking",description:"How to Avoid Blocking From Whatsapp",content:`How to Avoid Blocking in WhatsApp when developing bots.
It\u0026rsquo;s important to keep in mind that WhatsApp has strict policies in place to prevent spamming and abuse of their platform.
If you\u0026rsquo;re developing a bot for WhatsApp, it\u0026rsquo;s crucial to follow these guidelines to avoid getting blocked.
Guidelines to Follow #1. Only Reply to Messages #When developing a bot for WhatsApp, you should never initiate a conversation. Instead, your bot should only reply to messages that it receives. This will prevent your bot from being flagged as spam by WhatsApp\u0026rsquo;s users and algorithms.
2. Avoid Spamming and Sending Unnecessary Content #Sending too many messages or sending content that the user did not request can also lead to your bot being blocked. Make sure to only send relevant and useful information to the user. Additionally, do not send too many messages at once, as this can also trigger spam filters.
3. Other Considerations #There are other guidelines to follow when developing a bot for WhatsApp, such as avoiding the use of banned words and not sharing sensitive or inappropriate content. Make sure to read WhatsApp\u0026rsquo;s policies thoroughly to ensure that your bot complies with all of their rules.
How to Process Messages #When processing messages in your bot, it\u0026rsquo;s important to follow certain steps to avoid being flagged as spam. Here\u0026rsquo;s a recommended process to follow:
Send seen before processing the message. This can be done by sending a POST /api/sendSeen/ request to the WAHA API.
Start typing before sending a message and wait for a random interval depending on the size of the message. This can be done by sending a POST /api/startTyping/ request.
Stop typing before sending the message. This can be done by sending a POST /api/stopTyping/ request.
Send the text message using the POST /api/sendText request.
By following these steps, you can ensure that your bot processes messages in a way that\u0026rsquo;s compliant with WhatsApp\u0026rsquo;s guidelines and reduces the risk of being blocked.
`}),e.add({id:5,href:"/docs/how-to/receive-messages/",title:"Receive messages",description:"Receive messages",content:`We consider that you\u0026rsquo;ve run docker container and authenticated the session with QR code.
If you haven\u0026rsquo;t yet - please follow the steps from Quick Start →.
Webhooks #You must use Webhooks to receive messages from WhatsApp to your application.
Start a new session with configured message event in webhooks - call POST /api/sessions/start with the payload:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ] } ] } } After that WAHA\u0026rsquo;ll send events (see below) about new messages to an endpoint you provided.
Events #Here\u0026rsquo;s examples of message-related events. Read Webhooks -\u0026gt; to find how to set them up.
message #Incoming message (text/audio/files)
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: true, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;hasMedia\u0026quot;: false, \u0026quot;ack\u0026quot;: 1, \u0026quot;vCards\u0026quot;: [], \u0026quot;_data\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;fromMe\u0026quot;: true, \u0026quot;remote\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;_serialized\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot; }, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;chat\u0026quot;, \u0026quot;t\u0026quot;: 1667561485, \u0026quot;notifyName\u0026quot;: \u0026quot;MyName\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;self\u0026quot;: \u0026quot;in\u0026quot;, \u0026quot;ack\u0026quot;: 1, \u0026quot;isNewMsg\u0026quot;: true, \u0026quot;star\u0026quot;: false, \u0026quot;kicNotified\u0026quot;: false, \u0026quot;recvFresh\u0026quot;: true, \u0026quot;isFromTemplate\u0026quot;: false, \u0026quot;pollInvalidated\u0026quot;: false, \u0026quot;latestEditMsgKey\u0026quot;: null, \u0026quot;latestEditSenderTimestampMs\u0026quot;: null, \u0026quot;broadcast\u0026quot;: false, \u0026quot;mentionedJidList\u0026quot;: [], \u0026quot;isVcardOverMmsDocument\u0026quot;: false, \u0026quot;isForwarded\u0026quot;: false, \u0026quot;hasReaction\u0026quot;: false, \u0026quot;ephemeralOutOfSync\u0026quot;: false, \u0026quot;productHeaderImageRejected\u0026quot;: false, \u0026quot;lastPlaybackProgress\u0026quot;: 0, \u0026quot;isDynamicReplyButtonsMsg\u0026quot;: false, \u0026quot;isMdHistoryMsg\u0026quot;: false, \u0026quot;stickerSentTs\u0026quot;: 0, \u0026quot;isAvatar\u0026quot;: false, \u0026quot;requiresDirectConnection\u0026quot;: false, \u0026quot;pttForwardedFeaturesEnabled\u0026quot;: true, \u0026quot;isEphemeral\u0026quot;: false, \u0026quot;isStatusV3\u0026quot;: false, \u0026quot;links\u0026quot;: [] } } } message.any #Fired on all message creations, including your own. The payload is the same as for message event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: {} } message.ack #{ \u0026quot;event\u0026quot;: \u0026quot;message.ack\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: {} } Files #When people send you files - images, voice messages, and documents - WAHA saves it in the file storage. In your application you must download it and use it as you want to. You can find the URL in mediaUrl field
For example, you can get the webhook like this with mediaUrl value (we\u0026rsquo;ve skipped other fields):
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;mediaUrl\u0026quot;: \u0026quot;http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.jpg\u0026quot; } } Then you can use the link to download the file http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.jpg.
To configure the url you can use environment variables WHATSAPP_API_HOSTNAME and WHATSAPP_API_PORT.
By default, WAHA download all files that the account receive. If you want to limit files lifetime, specify file types for download or change directory for files - read more about file storage configuration and variables -\u0026gt;.
Endpoints #Get messages #Read messages from the history - use GET /api/messages endpoint.
You also can get messages for chats by using Get messages from chat -\u0026gt; endpoint.
👉 We do not recommend using this method in production, consider using webhooks instead! curl -X 'GET' \\ 'http://localhost:3000/api/messages?chatId=11111111111%40c.us\u0026amp;limit=1000\u0026amp;session=default' \\ -H 'accept: application/json' Examples #Here\u0026rsquo;s few examples of how to receive messages in different languages:
Python guide -\u0026gt; Do you use another language?
Please create a short guide how to handle webhook and send message after you finish your setup! You can create a pull request with your favorite language in the GitHub, in examples folder -\u0026gt;.
`}),e.add({id:6,href:"/docs/how-to/webhooks/",title:"Webhooks",description:"Webhooks",content:`The project uses Webhooks to send the messages and events from WhatsApp to your application.
Webhooks are a way for two different applications to communicate with each other in real-time. When a certain event happens in one application, it sends a message to another application through a webhook URL. The receiving application can then take action based on the information received.
Setup webhooks #Session webhooks #You can define webhooks configuration per session when you start it with POST /api/sessions/start request data.
Here\u0026rsquo;s a simple example:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ] } ] } } Here\u0026rsquo;s available configuration options for webhooks
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;hmac\u0026quot;: { \u0026quot;key\u0026quot;: \u0026quot;your-secret-key\u0026quot; }, \u0026quot;retries\u0026quot;: { \u0026quot;delaySeconds\u0026quot;: 2, \u0026quot;attempts\u0026quot;: 15 }, \u0026quot;customHeaders\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;X-My-Custom-Header\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Value\u0026quot; } ] } ] } } Global webhooks #There\u0026rsquo;s a way how you can configure webhooks for ALL sessions - by settings these environment variables:
WHATSAPP_HOOK_URL=https://httpbin.org/post - to set up a URL for the webhook WHATSAPP_HOOK_EVENTS=message,message.any,state.change - specify events. Do not specify all of them, it\u0026rsquo;s too heavy payload, choose the right for you. WHATSAPP_HOOK_EVENTS=* - subscribe to all events. It\u0026rsquo;s not recommended for production, but it\u0026rsquo;s fine for development. That webhook configuration does not appear in session.config field in GET /api/sessions/ request.
Webhook payload #On the URL that you set you\u0026rsquo;ll receive HTTP POST request with a JSON string with following format:
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } Where event value helps you identify the incoming event with payload for that events.
Below the list of all events that WhatsApp HTTP API sends to your.
👉 If you want to look at a webhook body - use the url https://httpbin.org/post Run the bellow command and see look at the logs - it prints body request for all events that happen in your WhatsApp!
docker run -it -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; -e WHATSAPP_HOOK_URL=https://httpbin.org/post -p 3000:3000 devlikeapro/whatsapp-http-api Events #message #Incoming message (text/audio/files)
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: true, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;hasMedia\u0026quot;: false, \u0026quot;ack\u0026quot;: 1, \u0026quot;vCards\u0026quot;: [], \u0026quot;_data\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;fromMe\u0026quot;: true, \u0026quot;remote\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;_serialized\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot; }, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;chat\u0026quot;, \u0026quot;t\u0026quot;: 1667561485, \u0026quot;notifyName\u0026quot;: \u0026quot;MyName\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;self\u0026quot;: \u0026quot;in\u0026quot;, \u0026quot;ack\u0026quot;: 1, \u0026quot;isNewMsg\u0026quot;: true, \u0026quot;star\u0026quot;: false, \u0026quot;kicNotified\u0026quot;: false, \u0026quot;recvFresh\u0026quot;: true, \u0026quot;isFromTemplate\u0026quot;: false, \u0026quot;pollInvalidated\u0026quot;: false, \u0026quot;latestEditMsgKey\u0026quot;: null, \u0026quot;latestEditSenderTimestampMs\u0026quot;: null, \u0026quot;broadcast\u0026quot;: false, \u0026quot;mentionedJidList\u0026quot;: [], \u0026quot;isVcardOverMmsDocument\u0026quot;: false, \u0026quot;isForwarded\u0026quot;: false, \u0026quot;hasReaction\u0026quot;: false, \u0026quot;ephemeralOutOfSync\u0026quot;: false, \u0026quot;productHeaderImageRejected\u0026quot;: false, \u0026quot;lastPlaybackProgress\u0026quot;: 0, \u0026quot;isDynamicReplyButtonsMsg\u0026quot;: false, \u0026quot;isMdHistoryMsg\u0026quot;: false, \u0026quot;stickerSentTs\u0026quot;: 0, \u0026quot;isAvatar\u0026quot;: false, \u0026quot;requiresDirectConnection\u0026quot;: false, \u0026quot;pttForwardedFeaturesEnabled\u0026quot;: true, \u0026quot;isEphemeral\u0026quot;: false, \u0026quot;isStatusV3\u0026quot;: false, \u0026quot;links\u0026quot;: [] } } } message.any #Fired on all message creations, including your own. The payload is the same as for message event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } message.ack #{ \u0026quot;event\u0026quot;: \u0026quot;message.ack\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } state.change #It\u0026rsquo;s an internal engine\u0026rsquo;s state, not session status.
{ \u0026quot;event\u0026quot;: \u0026quot;state.change\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } group.join #{ \u0026quot;event\u0026quot;: \u0026quot;group.join\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } group.leave #{ \u0026quot;event\u0026quot;: \u0026quot;group.left\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } presence.update #payload.id indicates the chat - either direct chat with a contact or a group chat. payload.id.[].participant - certain participant presence status. For a direct chat there\u0026rsquo;s only one participant. { \u0026quot;event\u0026quot;: \u0026quot;presence.update\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;111111111111111111@g.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;typing\u0026quot;, \u0026quot;lastSeen\u0026quot;: null } ] } } Webhooks Advanced #HMAC authentication #You can authenticate webhook sender by using HMAC Authentication.
Define you secret key in config.hmac.key field when you start session with POST /api/sessions/start: { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;hmac\u0026quot;: { \u0026quot;key\u0026quot;: \u0026quot;your-secret-key\u0026quot; } } ] } } After that you\u0026rsquo;ll receive all webhooks payload with two additional headers: X-Webhook-Hmac - message authentication code for the raw body in HTTP POST request that send to your endpoint. X-Webhook-Hmac-Algorithm - sha512 - algorithm that have been used to create X-Webhook-Hmac value. Implement the authentication algorithm by hashing body and using secret key and then verifying it with X-Webhook-Hmac value. Please check your implementation here -\u0026gt; Here\u0026rsquo;s example for
# Full body {\u0026quot;event\u0026quot;:\u0026quot;message\u0026quot;,\u0026quot;session\u0026quot;:\u0026quot;default\u0026quot;,\u0026quot;engine\u0026quot;:\u0026quot;WEBJS\u0026quot;} # Secret key my-secret-key # X-Webhook-Hmac-Algorithm sha512 # X-Webhook-Hmac 208f8a55dde9e05519e898b10b89bf0d0b3b0fdf11fdbf09b6b90476301b98d8097c462b2b17a6ce93b6b47a136cf2e78a33a63f6752c2c1631777076153fa89 Retries #WAHA retries to reach your webhook URL 15 times with 2 seconds delay between attempts by default in Plus Version →
You can configure those parameters by settings config.retries structure when POST /api/sessions/start:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;retries\u0026quot;: { \u0026quot;delaySeconds\u0026quot;: 2, \u0026quot;attempts\u0026quot;: 15 } } ] } } Custom Headers #You can send any customer headers by defining config.webhooks.customHeaders fields this way:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;customHeaders\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;X-My-Custom-Header\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Value\u0026quot; } ] } ] } } Examples #Here\u0026rsquo;s few examples of how to handle webhook in different languages:
Python guide Do you use another language?
Please create a short guide how to handle webhook and send message after you finish your setup! You can create a pull request with your favorite language in the GitHub, in examples folder -\u0026gt;.
`}),e.add({id:7,href:"/docs/how-to/sessions/",title:"Sessions",description:"Sessions",content:`Endpoints #Start #In order to start a new session - call POST /api/sessions/start
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } Configure webhooks #You can configure webhooks for a session:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ] } ] } } Read more about available options on Webhooks page -\u0026gt;
The configuration is saved and will be applied if the docker container restarts, and you set WHATSAPP_RESTART_ALL_SESSIONS environment variables. Read more about it in Autostart section.
Configure proxy #You can configure proxy for a session by setting config.proxy fields:
server - proxy server address, without http:// or https:// prefixes username and password - set this if the proxy requires authentication No authentication
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: { \u0026quot;server\u0026quot;: \u0026quot;localhost:3128\u0026quot; } } } Proxy with authentication
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: { \u0026quot;server\u0026quot;: \u0026quot;localhost:3128\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;username\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;P@ssw0rd\u0026quot; } } } The configuration is saved and will be applied if the docker container restarts, and you set WHATSAPP_RESTART_ALL_SESSIONS environment variables. Read more about it in Autostart section.
You can configure proxy when for all sessions by set up environment variables. Read more about it on Configuration page -\u0026gt;.
List #To get session list - call GET /api/sessions.
The response:
[ { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;STARTING\u0026quot; } ] You can add ?all=true parameter to the request GET /api/session?all=True it\u0026rsquo;ll show you ALL session, including STOPPED, so you can know which one will be restarted if you set WHATSAPP_RESTART_ALL_SESSIONS=True environment variable.
Stop #In order to stop a new session - call POST /api/sessions/stop
👉 The stop request does not log out the account by default. Set 'logout' field to 'true'. { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;logout\u0026quot;: true } Logout #In order to log out the session - call POST /api/sessions/logout
👉 You must stop session first. { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;logout\u0026quot;: true } Advanced sessions #With WAHA Plus version you can save session state to avoid scanning QR code everytime, configure autostart options so when the docker container restarts - it restores all previously run sessions!
Session persistent #File storage #If you want to save your session and do not scan QR code everytime when you launch WAHA - connect a local file storage to the container. WAHA stores authentication information in the directory and reuses it after restart.
Attach volume part to the command:
-v \`pwd\`/.sessions:/app/.sessions The full command would be:
docker run --rm -d -v \`pwd\`/.sessions:/app/.sessions -p 3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api-plus Remote storage #If you\u0026rsquo;re interested in using some \u0026ldquo;remote\u0026rdquo; storage (like Redis or other Databases) to save sessions - please create an issue on GitHub.
For instances, it may be useful if you run WAHA in a cluster of servers and do not have shared file storage
Autostart #If you don\u0026rsquo;t want to call POST /api/sessions/start for every session each time when the container restart - you can use set of these environment variables to start sessions for you:
WHATSAPP_RESTART_ALL_SESSIONS=True: Set this variable to True to start all STOPPED sessions after container restarts. By default, this variable is set to False. Please note that this will start all STOPPED sessions, not just the sessions that were working before the restart. You can maintain the session list by using POST /api/session/stop with the logout: True parameter or by calling POST /api/session/logout to remove STOPPED sessions. You can see all sessions, including STOPPED sessions, in the GET /api/sessions/all=True response. WHATSAPP_START_SESSION=session1,session2: This variable can be used to start sessions with the specified names right after launching the API. Separate session names with a comma. Multiple sessions #If you want to save server\u0026rsquo;s CPU and Memory - run multiple sessions inside one docker container! Plus version supports multiple sessions in one container.
`}),e.add({id:8,href:"/docs/how-to/chats/",title:"Chats",description:"Chats",content:`Chats methods.
Parameters in path that you can find in below endpoints:
{session} - use the session name for Whatsapp instance that you created with POST /api/session/start endpoint {chatId} - chat id in format 123123123123@[c.us|g.us], c.us for direct chats and g.us for groups. Methods #Get all chats #Get all chats GET /api/{session}/chats
Get messages from chat #Get 100 messages from the chat
GET /api/{session}/chats/{chatId}/messages?limit=100
Get 100 messages from the chat, skip downloading media (images, files)
GET /api/{session}/chats/{chatId}/messages?limit=100\u0026amp;downloadMedia=false
Delete chat #Use the method to delete chat
DELETE /api/{session}/chats/{chatId}
Clear messages #Use the method to clear all messages from the chat
DELETE /api/{session}/chats/{chatId}/messages
`}),e.add({id:9,href:"/docs/overview/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:`How to update? #💡 Please test all new versions in the development environment before updating production! For Core version the command is
docker pull devlikeapro/whatsapp-http-api For Plus version, we use login to get the image before:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus docker logout Read more about how to get PASSWORD for Plus Version →
How much CPU and Memory does WhatsApp HTTP API consume? #The benchmark has been made on Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz. It may differ from case to case, it depends on usage pattern - how many messages you get, how many send, etc.
Accounts (sessions) in the container CPU Memory 1 30% 400MB 10 270% 1.5GB The nature of WhatsApp HTTP API and its underlying engines - is to run real WhatsApp Web version in Chrome and communicate with it to prevent blocking from WhatsApp. It\u0026rsquo;s the reason why it\u0026rsquo;s so demanding on resources.
If you\u0026rsquo;re looking for less resource demanded engine - have a look at NOWEB engine -\u0026gt;
`}),e.add({id:10,href:"/docs/how-to/contacts/",title:"Contacts",description:"Contacts",content:`Methods for contacts.
👉 WhatsApp Web does not support adding contacts, so the API doesn't support it too. Get all contacts #Get your contacts - GET /api/contacts/all
[ { \u0026quot;id\u0026quot;: \u0026quot;11231231231@c.us\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Contact Name\u0026quot;, \u0026quot;pushname\u0026quot;: \u0026quot;Pushname\u0026quot;, \u0026quot;shortName\u0026quot;: \u0026quot;Shortname\u0026quot;, \u0026quot;isMe\u0026quot;: true, \u0026quot;isGroup\u0026quot;: false, \u0026quot;isWAContact\u0026quot;: true, \u0026quot;isMyContact\u0026quot;: true, \u0026quot;isBlocked\u0026quot;: false } ] Get contact #Get contact
GET /api/contacts?contactId=11231231231\u0026amp;session=default GET /api/contacts?contactId=11231231231@c.us\u0026amp;session=default { \u0026quot;id\u0026quot;: \u0026quot;11231231231@c.us\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Contact Name\u0026quot;, \u0026quot;pushname\u0026quot;: \u0026quot;Pushname\u0026quot;, \u0026quot;shortName\u0026quot;: \u0026quot;Shortname\u0026quot;, \u0026quot;isMe\u0026quot;: true, \u0026quot;isGroup\u0026quot;: false, \u0026quot;isWAContact\u0026quot;: true, \u0026quot;isMyContact\u0026quot;: true, \u0026quot;isBlocked\u0026quot;: false } Check phone number exists #If you want to check if phone number is registered in WhatsApp (even if the number is not in your contact list) - use this endpoint for that.
GET /api/contacts/check-exists?phone=11231231231\u0026amp;session=default { \u0026quot;numberExists\u0026quot;: true } Get \u0026ldquo;about\u0026rdquo; contact #GET /api/contacts/about?contactId=11231231231\u0026amp;session=default { \u0026quot;about\u0026quot;: \u0026quot;Hi, I use WhatsApp!\u0026quot; } Get contact profile picture #GET /api/contacts/profile-picture?contactId=11231231231\u0026amp;session=default { \u0026quot;profilePictureURL\u0026quot;: \u0026quot;https://example.com/profile.jpg\u0026quot; } Block (unblock) contact #To block contact - POST /api/contacts/block To unblock contact - POST /api/contacts/unblock Request:
{ \u0026quot;contactId\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } `}),e.add({id:11,href:"/docs/how-to/groups/",title:"Groups",description:"Groups",content:`Methods for groups. Please look at swagger for details.
{session} - use the session name for Whatsapp instance that you created with POST /api/session/start endpoint {groupId} - group id in format 123123123123@g.us. You can get the id in a few ways: By handling incoming message webhook. By getting all groups (see below). By creating a new group and saving the id. Create a new group #POST /api/{session}/groups
Request:
{ \u0026quot;name\u0026quot;: \u0026quot;Group name\u0026quot;, \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Get all groups #GET /api/{session}/groups
Get the group #GET /api/{session}/groups/{groupId}
Delete the group #DELETE /api/{session}/groups/{groupId}
Leave the group #POST /api/{session}/groups/{groupId}/leave
Set group subject #Updates the group subject.
Returns true if the subject was properly updated. This can return false if the user does not have the necessary permissions.
PUT /api/{session}/groups/{groupId}/subject
Request:
{ \u0026quot;subject\u0026quot;: \u0026quot;Group name\u0026quot; } Set group description #Updates the group description.
Returns true if the subject was properly updated. This can return false if the user does not have the necessary permissions.
PUT /api/{session}/groups/{groupId}/description
Request:
{ \u0026quot;description\u0026quot;: \u0026quot;Group description\u0026quot; } Settings #Security for group info #Updates the group settings to only allow admins to edit group info (title, description, photo).
PUT /api/{session}/groups/{groupId}/settings/security/info-admin-only
The request doesn\u0026rsquo;t require any request\u0026rsquo;s body and can\u0026rsquo;t be used to disable the security setting (allow ANY to edit group info). If you wish to have that ability - please create an issue
Participants #Get participants #GET /api/{session}/groups/{groupId}/participants
Add participants #POST /api/{session}/groups/{groupId}/participants/add
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Remove participants #POST /api/{session}/groups/{groupId}/participants/remove
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Admin #Promote to admin #Promote participants to admin users.
POST /api/{session}/groups/{groupId}/admin/promote
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Demote to regular users #Demote participants by to regular users.
POST /api/{session}/groups/{groupId}/admin/demote
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Invite code #Get invite code #GET /api/{session}/groups/{groupId}/invite-code
Then you can put it in the url https://chat.whatsapp.com/{inviteCode} and send it to contacts.
Revoke invite code #Invalidates the current group invite code and generates a new one.
POST /api/{session}/groups/{groupId}/invite-code/revoke
`}),e.add({id:12,href:"/docs/overview/changelog/",title:"Changelog",description:"WAHA's changelog",content:`2023.8 #August 2023
Added chats endpoints Get all chats - GET /api/{session/chats Delete chat - DELETE /api/{session/chats/{chatId} Get messages from chat - GET /api/{session/chats/{chatId}/messages?limit=1000?downloadMedia=true Clear messages in the chat DELETE /api/{session/chats/{chatId}/messages Added downloadMedia flag to speed up GET /api/messages and GET /api/{session/chats/{chatId}/messages performance. Added set presence endpoint! With online presence you can show your status as online #121 With offline presence you can get notifications for your device #28 Added security settings for edit group info PUT /api/{session}/groups/{groupId}/settings/security/info-admin-only - updates the group settings to only allow admins to edit group info (title, description, photo). 2023.7 #July 2023
Now session can have their own Webhooks - you can define webhook configuration when you start a session with POST /api/session/start! Add HMAC authentication for webhooks Configure retries Add you custom headers Added proxy configuration with supporting proxy authentication. Thanks puntolino for the contribution! You can control proxy\u0026rsquo;s settings per session with POST /api/session/start or globally with environment variables. Added presence information - now you can get online status for a contact by calling endpoints or receiving a webhook event! Now you can mention contact in groups by settings mentions field in POST /api/sendText read more about it in Send Messages -\u0026gt; 2023.6 #June 2023
Improvements on session management, restarting sessions and more:
Added WHATSAPP_RESTART_ALL_SESSIONS=True: Set this variable to True to start all STOPPED sessions after container restarts. By default, this variable is set to False. Please note that this will start all STOPPED sessions, not just the sessions that were working before the restart. You can maintain the session list by using POST /api/session/stop with the logout: True parameter or by calling POST /api/session/logout to remove STOPPED sessions. You can see all sessions, including STOPPED sessions, in the GET /api/sessions/all=True response. WHATSAPP_START_SESSION now support more than one session! Separate session names by command, and it\u0026rsquo;ll start them ALWAYS after container restart WHATSAPP_START_SESSION=session1,session2 WHATSAPP_SWAGGER_CONFIG_ADVANCED=true enables advanced configuration options for Swagger documentation - you can customize host, port and base URL for the requests. Disabled by default. Added ?all=true parameter to GET /api/session?all=True endpoint - it\u0026rsquo;ll show you ALL session, included **STOPPED **, so you can know which one will be restarted if you set WHATSAPP_RESTART_ALL_SESSIONS=True environment variable. Added POST /api/sessions/logout that allow you to logout from session - remove saved credentials. Added logout boolean parameter to POST /api/sessions/stop request that allow you to stop the session AND logout at the same time. Added How to deploy page -\u0026gt; with docker-compose.yaml example Added engine field in webhook payload { \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: {} } 2023.5 #May 2023
Added new NOWEB engine. NOWEB engine does not require a browser to work with WhatsApp Web, it does so directly using a WebSocket. Less CPU and RAM usage! Send Locations API works! Send Link Preview API works! ⚠ Read the article before using it How to avoid blocking -\u0026gt;. 2023.4 #March 2023
Add Groups API Use Chromium by default instead of Chrome 2023.1 #January 2023
Added Contacts API Get all contacts Get a contact Get contact \u0026ldquo;about\u0026rdquo; (status) Get contact profile picture Check number exists (is registered in WhatsApp) - works even if the number is not in the contact list Block and unblock contact 2022.12 #December 2023
Added GET /messages/ endpoint to get chat messages #31 Security #Added WHATSAPP_SWAGGER_USERNAME and WHATSAPP_SWAGGER_PASSWORD to hide and protect swagger panel. 2022.11 #Please test changes in test environment before update production!!
Engine #WAHA has changed its underlying engine from Venom to Whatsapp Web.JS. It might change the response and webhook\u0026rsquo;s payloads. Optimize CPU and memory consumption. Requests #For all /api/session/ requests use name field instead of sessionName. For all \u0026ldquo;chatting\u0026rdquo; requests use session field instead of sessionName. Sessions #Now you don\u0026rsquo;t have to scan QR code each time you run WAHA, WAHA saves it for you! Available only in Plus version.
Authentication #Now you can authenticate all requests for WAHA - use WHATSAPP_API_KEY=secret environment variable to set \u0026ldquo;secret key\u0026rdquo;.
If WHATSAPP_API_KEY is set - requests must have X-Api-Key header with secret value, where secret - any random secret key.
Webhooks #Configuration #Instead of setting each webhook via environment variables - we use two environments variables:
WHATSAPP_HOOK_URL - to set a URL WHATSAPP_HOOK_EVENTS - to set events that are sent to the URL Previous Current WHATSAPP_HOOK_ONMESSAGE=https://httpbin.org/post WHATSAPP_HOOK_ONANYMESSAGE=https://httpbin.org/post WHATSAPP_HOOK_URL=https://httpbin.org/post WHATSAPP_HOOK_EVENTS=message,message.any Payload #The data for webhooks are wrapped inside a new WAWebhook object with event and payload fields to help you identify which handler you should call based on event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;payload\u0026quot;: { } } `}),e.add({id:13,href:"/docs/how-to/",title:"How-to guides",description:"How-to guides",content:""}),e.add({id:14,href:"/docs/examples/python/",title:"Python",description:"WhatsApp HTTP API Python examples.",content:`We\u0026rsquo;ve created a few examples on how to interact with WAHA WhatsApp HTTP API with Python.
You can find the examples in examples folder on GitHub with detailed instructions in README.md
`}),e.add({id:15,href:"/docs/how-to/security/",title:"Security",description:"Security",content:`💡 Do not expose WhatsApp HTTP API on public networks! We do not recommend exposing the API on any public networks!
Either protect the API with Api Key or deny access by using firewalls.
Swagger Security #If you want to hide the project Swagger panel under the password - run the following command to hide under admin/admin login and password.
docker run -it -e WHATSAPP_SWAGGER_USERNAME=admin -eWHATSAPP_SWAGGER_PASSWORD=admin devlikeapro/whatsapp-http-api-plus Open http://localhost:3000/ and enter admin / admin in the inputs:
👉 Protecting Swagger under the password does not protect your API from other request! Use both techniques to protect your API and Swagger! API security #You can protect the API by requiring Api Key in a request\u0026rsquo;s headers.
👉 Api Key does not hide your Swagger documentation. Please have a look at the previous section to find how to hide Swagger under the password. Set Api Key #Set WHATSAPP_API_KEY=yoursecretkey environment variable for that:
docker run -it -e WHATSAPP_API_KEY=yoursecretkey devlikeapro/whatsapp-http-api-plus Use Api-Key in Swagger #After you set api key - to authorize on swagger use Authorize button at the top: Add X-Api-Key header #To authorize requests - set X-Api-Key header to yoursecretkey for all requests that go to WAHA.
Python #Example for Python requests library:
import requests headers = { 'Content-type': 'application/json', 'X-Api-Key': 'yoursecretkey', } requests.get(\u0026quot;http://localhost:3000/api/sessions\u0026quot;, headers=headers) Webhook security #To make sure that you get a webhook from your WAHA instance - you can use HMAC authentication. Read more about it on Webhooks page -\u0026gt;
`}),e.add({id:16,href:"/docs/how-to/config/",title:"Configuration",description:"Configuration",content:`You can configure WhatsApp HTTP API behaviour via environment variables, by adding -e WHATSAPP_VARNAME=value at the begging of the command line or by using other options
docker run -it -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; -e WHATSAPP_HOOK_URL=https://httpbin.org/post devlikeapro/whatsapp-http-api It\u0026rsquo;s not necessary to always run such a long command - you can save all data in docker-compose.yaml file as described on How to deploy page -\u0026gt;.
Environment variables #The following environment variables can be used to configure the WAHA.
Common #DEBUG=1: Set this variable to any value to enable debug and verbose logs. WHATSAPP_API_PORT=3000: The port number that the HTTP server will listen on. The default value is 3000. WHATSAPP_API_HOSTNAME=localhost: The hostname for the HTTP server. The default value is localhost. Sessions #WHATSAPP_RESTART_ALL_SESSIONS=True: Set this variable to True to start all STOPPED sessions after container restarts. By default, this variable is set to False. Please note that this will start all STOPPED sessions, not just the sessions that were working before the restart. You can maintain the session list by using POST /api/session/stop with the logout: True parameter or by calling POST /api/session/logout to remove STOPPED sessions. You can see all sessions, including STOPPED sessions, in the GET /api/sessions/all=True response. WHATSAPP_START_SESSION=session1,session2: This variable can be used to start sessions with the specified names right after launching the API. Separate session names with a comma. Swagger #WHATSAPP_SWAGGER_CONFIG_ADVANCED=true - enables advanced configuration options for Swagger documentation - you can customize host, port and base URL for the requests. Disabled by default. Proxy #Global proxy configuration #If you need to use a proxy, you can set the following environment variables:
WHATSAPP_PROXY_SERVER=localhost:3128: Use this variable to set the proxy server in the format host:port, without http or https. WHATSAPP_PROXY_SERVER_USERNAME=username and WHATSAPP_PROXY_SERVER_PASSWORD=password: Use these variables to set up credentials for the proxy. WHATSAPP_PROXY_SERVER_LIST=host1.example.com:3138,host2.example.com:3138: Use this variable to set a comma-separated list of addresses to use, using a round-robin algorithm to choose the server for the session. WHATSAPP_PROXY_SERVER_INDEX_PREFIX=proxy-: Use this variable to parse the session name for the prefix and find the appropriate session. For example, if you have set WHATSAPP_PROXY_SERVER_LIST=host-first:80,host-second:80,host-third:80 and WHATSAPP_PROXY_SERVER_INDEX_PREFIX=proxy- and you run proxy-3 session, the host-third:80 proxy will be chosen for that session. This is a way to select a proxy from while you start session. Session proxy configuration #You can configure proxy when you start session by setting config.proxy fields. Read more about it on Session page -\u0026gt;.
Keep in mind that session\u0026rsquo;s proxy configuration takes precedence over proxy configuration set by environment variables!
Security #WHATSAPP_API_KEY=mysecret: If you set this variable, you must include the X-Api-Key: mysecret header in all requests to the API. This will protect the API with a secret code. WHATSAPP_SWAGGER_USERNAME=admin and WHATSAPP_SWAGGER_PASSWORD=admin: These variables can be used to protect the Swagger panel with admin / admin credentials. This does not affect API access. Files #The following environment variables can be used to configure the file storage options for the WAHA:
WHATSAPP_FILES_MIMETYPES: This variable can be used to download only specific mimetypes from messages. By default, all files are downloaded. The mimetypes must be separated by a comma, without spaces. For example: audio,image/png,image/gif. To choose a specific type, use a prefix (like audio,image). WHATSAPP_FILES_LIFETIME: This variable can be used to set the time (in seconds) after which files will be removed to free up space. The default value is 180. WHATSAPP_FILES_FOLDER: This variable can be used to set the folder where files from chats (images, voice messages) will be stored. The default value is /tmp/whatsapp-files. Examples #Debug Mode #To enable debug mode, set the DEBUG environment variable to any value:
DEBUG=1 Protecting the API with a Secret Code #To protect the API with a secret code, set the WHATSAPP_API_KEY environment variable to your secret code:
WHATSAPP_API_KEY=mysecret You must include the X-Api-Key: mysecret header in all requests to the API.
Starting Sessions Automatically #To start sessions automatically when the API is launched, set the WHATSAPP_START_SESSION environment variable to a comma-separated list of session names:
WHATSAPP_START_SESSION=session1,session2 Restarting All Sessions #To start all STOPPED sessions after container restarts, set the WHATSAPP_RESTART_ALL_SESSIONS environment variable to True:
WHATSAPP_RESTART_ALL_SESSIONS=True Protecting the Swagger Panel #To protect the Swagger panel with admin / admin credentials, set the WHATSAPP_SWAGGER_USERNAME and WHATSAPP_SWAGGER_PASSWORD environment variables:
WHATSAPP_SWAGGER_USERNAME=admin WHATSAPP_SWAGGER_PASSWORD=admin Downloading Specific Mimetypes #To download only specific mimetypes from messages, set the WHATSAPP_FILES_MIMETYPES environment variable to a comma-separated list of mimetypes:
WHATSAPP_FILES_MIMETYPES=audio,image/png,image/gif Setting the File Lifetime #To set the time (in seconds) after which files will be removed to free up space, set the WHATSAPP_FILES_LIFETIME environment variable:
WHATSAPP_FILES_LIFETIME=300 Setting the File Storage Folder #To set the folder where files from chats (images, voice messages) will be stored, set the WHATSAPP_FILES_FOLDER environment variable:
WHATSAPP_FILES_FOLDER=/home/user/whatsapp-files `}),e.add({id:17,href:"/docs/how-to/engines/",title:"Engines",description:"Engines",content:`Under the hood WAHA allows you to use two different engines. You can control what you want to run by settings WHATSAPP_DEFAULT_ENGINE environment variables.
docker run -it -e \u0026quot;WHATSAPP_DEFAULT_ENGINE=WEBJS\u0026quot; devlikeapro/whatsapp-http-api If you have any problems with one engine - try another!
👉 API responses and webhook payloads may differ significantly! We do our best to keep requests body stable between engines. All engines are available in Core version WEBJS #A WhatsApp API client that connects through the WhatsApp Web browser app. It uses Puppeteer to run a real instance of Whatsapp Web to avoid getting blocked.
WAHA uses WhatsApp WebJS engine by default.
WHATSAPP_DEFAULT_ENGINE=WEBJS https://github.com/pedroslopez/whatsapp-web.js NOWEB #NOWEB engine does not require a browser to work with WhatsApp Web, it does so directly using a WebSocket. Not running Chromium saves you CPU and Memory, so you can run more instances on a single server!
️Working with the engine requires more attention, because it\u0026rsquo;s easy to be blocked with it!
⚠ Read the article before using NOWEB engine How to avoid blocking -\u0026gt;.
WHATSAPP_DEFAULT_ENGINE=NOWEB https://github.com/WhiskeySockets/Baileys VENOM #It\u0026rsquo;s a high-performance system developed with JavaScript to create a bot for WhatsApp
WHATSAPP_DEFAULT_ENGINE=VENOM https://github.com/orkestral/venom `}),e.add({id:18,href:"/docs/how-to/presence/",title:"Presence",description:"Presence",content:`You can get presence information (online, offline with last seen, typing status) for a contact if they share their presence information.
Possible presence statuses that you can set or get for chats:
online offline typing recording paused resets the chat presence after you were typing Endpoints #Set presence #You can set your global or chat-related presence with POST /api/{session}/presence endpoint
Start typing to a chat (you can use POST /startTyping instead)
{ \u0026quot;chatId\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;presence\u0026quot;: \u0026quot;typing\u0026quot; } Clear \u0026ldquo;typing\u0026rdquo; state (you can use POST /stopTyping instead)
{ \u0026quot;chatId\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;presence\u0026quot;: \u0026quot;paused\u0026quot; } Set global \u0026ldquo;online\u0026rdquo;, all contacts will see it
{ \u0026quot;presence\u0026quot;: \u0026quot;online\u0026quot; } 💡 In the multi-device version of WhatsApp - if a desktop client is active, WhatsApp doesn\u0026rsquo;t send push notifications to the device. If you would like to receive said notifications - you need to mark a session\u0026rsquo;s presence as offline.
{ \u0026quot;presence\u0026quot;: \u0026quot;offline\u0026quot; } Get all chats presence #👉 Get presence endpoints and webhook is available only in **NOWEB** engine. Read more about engines to choose right for you -\u0026gt;
Here\u0026rsquo;s few notes about fields:
chatId - either contact id (213213213@c.us) or group chat id (1111111111111@g.us). lastSeen - contains Unix timestamps indicating when a participant was last online lastKnownPresence - contains the last known presence status, which can be offline, online, typing, recording, or paused You can get all presence information available for a session by calling GET /api/{session}/presence/. It returns both groups\u0026rsquo; and personal chats\u0026rsquo; presence information.
[ { \u0026quot;id\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;offline\u0026quot;, \u0026quot;lastSeen\u0026quot;: 1686719326 } ] }, { \u0026quot;id\u0026quot;: \u0026quot;11111111111111111111111@g.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;11111111111111111111111@g.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;online\u0026quot;, \u0026quot;lastSeen\u0026quot;: null }, { \u0026quot;participant\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;offline\u0026quot;, \u0026quot;lastSeen\u0026quot;: 1686719326 } ] } ] Get chat presence #To get presence information for a single chat - call GET /api/{session}/presence/{chatId}. For a group, you\u0026rsquo;ll get participants\u0026rsquo; statuses.
{ \u0026quot;id\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;online\u0026quot;, \u0026quot;lastSeen\u0026quot;: null } ] } Subscribe to presence #You can subscribe to presence information by calling POST /api/{session}/presence/{chatId}/subscribe request (no body required). You can get later presence information for the chat with above GET endpoints or by listening to presence.update webhook.
Webhook #You can subscribe to presence.update webhook event to get the most recent presence information.
{ \u0026quot;event\u0026quot;: \u0026quot;presence.update\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;111111111111111111@g.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;typing\u0026quot;, \u0026quot;lastSeen\u0026quot;: null } ] }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } `}),e.add({id:19,href:"/docs/how-to/deploy/",title:"Deploy",description:"How to deploy WAHA",content:`This page provides useful information to assist you in deploying the project. It includes tips on how to avoid running long command lines, how to view logs, and other helpful advice.
How to Use Docker Compose #Docker Compose is a tool that allows you to define and run multi-container Docker applications. It simplifies the process of managing multiple containers and their dependencies. In this topic, we will walk you through how to use Docker Compose with the WhatsApp HTTP API.
Prerequisites #Before you start, you need to have Docker and Docker Compose installed on your machine. You can download Docker from the official website here. Docker Compose is included with Docker Desktop for Windows and macOS, but for Linux, you need to install it separately. You can find the installation instructions here.
Getting Started #To get started, you need to clone the docker-compose.yaml file to your local machine. Open your terminal and run the following command:
wget https://raw.githubusercontent.com/devlikeapro/whatsapp-http-api/core/docker-compose.yaml Running the WhatsApp HTTP API Service #To start the whatsapp-http-api service, run the following command:
docker-compose up -d whatsapp-http-api This will start the container in detached mode and map port 3000 to 3000 on the host machine.
To stop the service, run the command:
docker-compose down This will stop and remove the container.
To restart the service, run the command:
docker-compose restart whtasapp-http-api This will restart the container.
Viewing the Logs #To view the logs for the whatsapp-http-api service, run the command:
docker-compose logs -f whatsapp-http-api This will show the logs in real-time. To view the logs for the whatsapp-http-api-plus service, replace whatsapp-http-api with whatsapp-http-api-plus.
To view the logs for a specific period, run the command:
docker-compose logs --since \u0026lt;time\u0026gt; Replace \u0026lt;time\u0026gt; with the time period you want to view the logs for. For example, docker-compose logs --since 1h will show the logs for the past hour.
Using the WhatsApp HTTP API Services #There are two services provided in the docker-compose.yml file - whatsapp-http-api and whatsapp-http-api-plus. It is important to note that these services must not be run at the same time. By default, the whatsapp-http-api service will be used.
To use the whatsapp-http-api-plus service, you need to specify it in the command.
`}),e.add({id:20,href:"/docs/examples/",title:"Examples",description:"Examples for different languages.",content:""}),e.add({id:21,href:"/docs/how-to/plus-version/",title:"WAHA Plus",description:"WAHA Plus",content:`Overview #WAHA is distributed in two versions:
Core the basic version that meet almost 80% people’s needs. 100% free and open source. Plus the version with advanced messages, security, and reliability features. You support the project and get WAHA Plus on Boosty -\u0026gt; or Patreon -\u0026gt; .
Donations #WAHA Plus version is available through donations (subscriptions).
It doesn\u0026rsquo;t require monthly subscriptions, once installed on your server - it always works! (until WhatsApp made backward-incompatible changes, and you have to update the image)
💡 No licence checks or expiration on already installed instances! We do not sell WAHA, it\u0026rsquo;s not a purchase. It\u0026rsquo;s a donation.
We treat our projects like art. You donate to the project and get a bit more from it as a thank-you. 😊
Treat WAHA Plus it as an additional episode, behind-the-scenes videos, our nude photos 😊
💡 WAHA does not have license checks and expiration - because art can not expire! Enjoy it till it works! We donate most of the donations down to the stream to the underlying libraries and tools - JS-community, Node, other libraries authors, personal contributors. By donating to the WAHA you donate to the Open Source world!
Features #The Plus additional features are:
Send images\\files\\voices → Receive images\\files\\voices → Webhook retries → Security → Saving sessions → Support multiple sessions → Priority in support - on both bugs and features Why WAHA? #What is the difference between WAHA Plus and other SaaS solutions for WhatsApp HTTP API?
WAHA Plus Others Sessions ✔️ No limits on accounts or servers! ➖ One account for \$50/month. Infrastructure ✔️ On-Premise - your server, your infrastructure! ➖ Insecure cloud solution. Security ✔️ No data leaks! ➖ You have to give access to customers\u0026rsquo; data - phone number, name, your messages. License Term ✔️ No license checks! ➖ One month Message price ✔️ All messages are Free! ➖ Some solutions have a price for messages - \$1/100 messages. Expenses ✔️ \$19 donation! ➖ Monthly payment starts from \$50 Get Plus #The more you support the project - the more you get!
Here\u0026rsquo;s available tiers for our supporters:
Plus Advanced Pro Access to WAHA Plus docker image. ✔️ ✔️ ✔️ An invitation to a private Github repository so you have the WAHA Plus source code. ➖️ ✔️ ✔️️ Access to a Telegram group where we provide support and assistance. ➖️ ➖ ✔️ Donation \$19 \$39 \$99 For \$19 donation you get:
Secret password for Docker Hub to download Plus image: devlikeapro/whatsapp-http-api-plus. All updates for one month for the Plus image. NO LICENSE CHECKS on installed instances! NO LICENSE EXPIRATION on installed instances! We repeated it twice to make sure that you\u0026rsquo;ve got it 😊 💡 If you stay subscribed - the donation amount will never change for you and always be \$19 to get monthly updates! Boosty #Support the project and get WAHA Plus version on Boosty -\u0026gt; Go ahead and get your own WhatsApp HTTP API!
Patreon #Support the project and get WAHA Plus version on Patreon -\u0026gt; Go ahead and get your own WhatsApp HTTP API!
Install Plus #After you get the password, use it to login and download docker image:
docker login -u devlikeapro -p {PASSWORD} docker pull devlikeapro/whatsapp-http-api-plus docker logout Then in all commands use Plus image devlikeapro/whatsapp-http-api-plus instead of Core devlikeapro/whatsapp-http-api.
`}),e.add({id:22,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()