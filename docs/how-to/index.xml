<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How-to guides on</title><link>https://waha.devlike.pro/docs/how-to/</link><description>Recent content in How-to guides on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://waha.devlike.pro/docs/how-to/index.xml" rel="self" type="application/rss+xml"/><item><title>Send messages</title><link>https://waha.devlike.pro/docs/how-to/send-messages/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/send-messages/</guid><description>We consider that you&amp;rsquo;ve run docker container and authenticated the session with QR code.
If you haven&amp;rsquo;t yet - please follow the steps from Quick Start â†’.
Fields #
There are common fields that you can find in almost all requests:
session - a session name from which account you&amp;rsquo;re sending the message. We use default in the examples.
Core version supports only default session. Plus allows you to run multiple sessions inside one container to save your memory and CPU resources!</description></item><item><title>Receive messages</title><link>https://waha.devlike.pro/docs/how-to/receive-messages/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/receive-messages/</guid><description>We consider that you&amp;rsquo;ve run docker container and authenticated the session with QR code.
If you haven&amp;rsquo;t yet - please follow the steps from Quick Start â†’.
Webhooks #
You must use Webhooks to receive messages from WhatsApp to your application.
Start a new session with configured message event in webhooks - call POST /api/sessions/start with the payload:
{ &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;, &amp;quot;config&amp;quot;: { &amp;quot;webhooks&amp;quot;: [ { &amp;quot;url&amp;quot;: &amp;quot;https://httpbin.org/post&amp;quot;, &amp;quot;events&amp;quot;: [ &amp;quot;message&amp;quot; ] } ] } } After that WAHA&amp;rsquo;ll send events (see below) about new messages to an endpoint you provided.</description></item><item><title>Webhooks</title><link>https://waha.devlike.pro/docs/how-to/webhooks/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/webhooks/</guid><description>The project uses Webhooks to send the messages and events from WhatsApp to your application.
Webhooks are a way for two different applications to communicate with each other in real-time. When a certain event happens in one application, it sends a message to another application through a webhook URL. The receiving application can then take action based on the information received.
Setup webhooks #
Session webhooks #
You can define webhooks configuration per session when you start it with POST /api/sessions/start request data.</description></item><item><title>Sessions</title><link>https://waha.devlike.pro/docs/how-to/sessions/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/sessions/</guid><description>Endpoints #
Start #
In order to start a new session - call POST /api/sessions/start
{ &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot; } Configure webhooks #
You can configure webhooks for a session:
{ &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;, &amp;quot;config&amp;quot;: { &amp;quot;webhooks&amp;quot;: [ { &amp;quot;url&amp;quot;: &amp;quot;https://httpbin.org/post&amp;quot;, &amp;quot;events&amp;quot;: [ &amp;quot;message&amp;quot; ] } ] } } Read more about available options on Webhooks page -&amp;gt;
The configuration is saved and will be applied if the docker container restarts, and you set WHATSAPP_RESTART_ALL_SESSIONS environment variables.</description></item><item><title>Contacts</title><link>https://waha.devlike.pro/docs/how-to/contacts/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/contacts/</guid><description>Methods for contacts.
ðŸ‘‰ WhatsApp Web does not support adding contacts, so the API doesn't support it too. Get all contacts #
Get your contacts - GET /api/contacts/all
[ { &amp;quot;id&amp;quot;: &amp;quot;11231231231@c.us&amp;quot;, &amp;quot;number&amp;quot;: &amp;quot;11231231231&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Contact Name&amp;quot;, &amp;quot;pushname&amp;quot;: &amp;quot;Pushname&amp;quot;, &amp;quot;shortName&amp;quot;: &amp;quot;Shortname&amp;quot;, &amp;quot;isMe&amp;quot;: true, &amp;quot;isGroup&amp;quot;: false, &amp;quot;isWAContact&amp;quot;: true, &amp;quot;isMyContact&amp;quot;: true, &amp;quot;isBlocked&amp;quot;: false } ] Get contact #
Get contact
GET /api/contacts?contactId=11231231231&amp;amp;session=default GET /api/contacts?contactId=11231231231@c.us&amp;amp;session=default { &amp;quot;id&amp;quot;: &amp;quot;11231231231@c.us&amp;quot;, &amp;quot;number&amp;quot;: &amp;quot;11231231231&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Contact Name&amp;quot;, &amp;quot;pushname&amp;quot;: &amp;quot;Pushname&amp;quot;, &amp;quot;shortName&amp;quot;: &amp;quot;Shortname&amp;quot;, &amp;quot;isMe&amp;quot;: true, &amp;quot;isGroup&amp;quot;: false, &amp;quot;isWAContact&amp;quot;: true, &amp;quot;isMyContact&amp;quot;: true, &amp;quot;isBlocked&amp;quot;: false } Check phone number exists #
If you want to check if phone number is registered in WhatsApp (even if the number is not in your contact list) - use this endpoint for that.</description></item><item><title>Groups</title><link>https://waha.devlike.pro/docs/how-to/groups/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/groups/</guid><description>Methods for groups. Please look at swagger for details.
{session} - use the session name for Whatsapp instance that you created with POST /api/session/start endpoint {groupId} - group id in format 123123123123@g.us. You can get the id in a few ways: By handling incoming message webhook. By getting all groups (see below). By creating a new group and saving the id. Create a new group #
POST /api/{session}/groups
Request:
{ &amp;quot;name&amp;quot;: &amp;quot;Group name&amp;quot;, &amp;quot;participants&amp;quot;: [ { &amp;quot;id&amp;quot;: &amp;quot;123123123123@c.</description></item><item><title>Security</title><link>https://waha.devlike.pro/docs/how-to/security/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/security/</guid><description>ðŸ’¡ Do not expose WhatsApp HTTP API on public networks! We do not recommend exposing the API on any public networks!
Either protect the API with Api Key or deny access by using firewalls.
Swagger Security #
If you want to hide the project Swagger panel under the password - run the following command to hide under admin/admin login and password.
docker run -it -e WHATSAPP_SWAGGER_USERNAME=admin -eWHATSAPP_SWAGGER_PASSWORD=admin devlikeapro/whatsapp-http-api-plus Open http://localhost:3000/ and enter admin / admin in the inputs:</description></item><item><title>Configuration</title><link>https://waha.devlike.pro/docs/how-to/config/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/config/</guid><description>You can configure WhatsApp HTTP API behaviour via environment variables, by adding -e WHATSAPP_VARNAME=value at the begging of the command line or by using other options
docker run -it -e &amp;quot;WHATSAPP_HOOK_EVENTS=*&amp;quot; -e WHATSAPP_HOOK_URL=https://httpbin.org/post devlikeapro/whatsapp-http-api It&amp;rsquo;s not necessary to always run such a long command - you can save all data in docker-compose.yaml file as described on How to deploy page -&amp;gt;.
Environment variables #
The following environment variables can be used to configure the WAHA.</description></item><item><title>Engines</title><link>https://waha.devlike.pro/docs/how-to/engines/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/engines/</guid><description>Under the hood WAHA allows you to use two different engines. You can control what you want to run by settings WHATSAPP_DEFAULT_ENGINE environment variables.
docker run -it -e &amp;quot;WHATSAPP_DEFAULT_ENGINE=WEBJS&amp;quot; devlikeapro/whatsapp-http-api If you have any problems with one engine - try another!
ðŸ‘‰ API responses and webhook payloads may differ significantly! We do our best to keep requests body stable between engines. All engines are available in Core version WEBJS #
A WhatsApp API client that connects through the WhatsApp Web browser app.</description></item><item><title>Presence</title><link>https://waha.devlike.pro/docs/how-to/presence/</link><pubDate>Tue, 06 Oct 2020 08:48:45 +0000</pubDate><guid>https://waha.devlike.pro/docs/how-to/presence/</guid><description>You can get presence information (online, offline with last seen, typing status) for a contact if they share their presence information.
Possible presence statuses that you can set or get for chats:
online offline typing recording paused resets the chat presence after you were typing Endpoints #
Set presence #
You can set your global or chat-related presence with POST /api/{session}/presence endpoint
Start typing to a chat (you can use POST /startTyping instead)</description></item></channel></rss>